* DONE Speaking in tongues
  CLOSED: [2012-04-13 Fri 19:07]
  Bijection?

  #+BEGIN_QUOTE
  This mapping is one-to-one and onto, which means that the same input
  letter always gets replaced with the same output letter, and different
  input letters always get replaced with different output letters.
  #+END_QUOTE

  See [[http://en.wikipedia.org/wiki/Bijection][this]]:

  #+BEGIN_QUOTE
  With this terminology, a bijection is a function which is both a
  surjection and an injection, or using other words, a bijection is a
  function which is both one-to-one and onto.
  #+END_QUOTE

  Spaces happen to map to themselves; they are also the only character
  to do so:

  #+BEGIN_QUOTE
  A letter may be replaced by itself. Spaces are left as-is.
  #+END_QUOTE
** Translation
   #+BEGIN_SRC scheme :tangle speaking-in-tongues/translation.scm
     (require 'srfi-69 'srfi-13)
     
     (use test srfi-95)
     
     ;;; Initial hypothesis
     (define translation
       (alist->hash-table
        '(;; From the problem specification
          (#\a . #\y)
          (#\o . #\e)
          (#\z . #\q)
          ;; By process of elimination from below (a circular dependency).
          (#\q . #\z))))
     
     (define inputs->outputs
       '(("ejp mysljylc kd kxveddknmc re jsicpdrysi"
          "our language is impossible to understand")
         ("rbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd"
          "there are twenty six factorial possibilities")
         ("de kr kd eoya kw aej tysr re ujdr lkgc jv"
          "so it is okay if you want to just give up")))
     
     ;;; Modify the translation based on the input->output mapping.
     (for-each (lambda (input->output)
                 (receive (input output)
                   (apply values input->output)
                   (for-each (lambda (from to)
                               (hash-table-set! translation from to))
                             (string->list input)
                             (string->list output))))
               inputs->outputs)
   #+END_SRC

   #+BEGIN_SRC scheme :noweb yes :tangle speaking-in-tongues/test-translation.scm :shebang #!/usr/bin/env chicken-scheme
     (include "translation.scm")
     
     (test
      '((#\space . #\space)
        (#\a . #\y)
        (#\b . #\h)
        (#\c . #\e)
        (#\d . #\s)
        (#\e . #\o)
        (#\f . #\c)
        (#\g . #\v)
        (#\h . #\x)
        (#\i . #\d)
        (#\j . #\u)
        (#\k . #\i)
        (#\l . #\g)
        (#\m . #\l)
        (#\n . #\b)
        (#\o . #\k)
        (#\p . #\r)
        (#\q . #\z)
        (#\r . #\t)
        (#\s . #\n)
        (#\t . #\w)
        (#\u . #\j)
        (#\v . #\p)
        (#\w . #\f)
        (#\x . #\m)
        (#\y . #\a)
        (#\z . #\q))
      (sort (hash-table->alist translation) char<? car))   
   #+END_SRC

** Translate

   #+BEGIN_SRC scheme :tangle speaking-in-tongues/translate.scm
     (include "translation.scm")
     
     (define (translate input)
       (string-map (lambda (transferendum)
                     (hash-table-ref translation transferendum))
                   input))
   #+END_SRC

   #+BEGIN_SRC scheme
     (include "translate.scm")
     
     (test
      "our language is impossible to understand"
      (translate "ejp mysljylc kd kxveddknmc re jsicpdrysi"))
     
     (test
      "there are twenty six factorial possibilities"
      (translate "rbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd"))
     
     (test
      "so it is okay if you want to just give up"
      (translate "de kr kd eoya kw aej tysr re ujdr lkgc jv"))
   #+END_SRC

** Handle input files

   #+BEGIN_SRC scheme :tangle speaking-in-tongues/translate-file.scm :shebang #!/usr/bin/env chicken-scheme
     (include "translate.scm")
     
     (use extras)
     
     (define (display-case transferendum number)
       (format #t "Case #~a: ~a~%" number (translate transferendum)))
     
     (define (translate-input)
       (let ((test-cases (read-line)))
         (let read ((transferendum (read-line))
                    (case 1))
           (if (not (eof-object? transferendum))
               (begin
                 (display-case transferendum case)
                 (read (read-line) (+ case 1)))))))
     
     (translate-input)
   #+END_SRC

* TODO Dancing
  Some sort of additive factorization. Can we try by using floor(n/3),
  floor(n/3), remainder; taking down floor(n/3) by one if that doesn't
  work. Alternatively, can we distribute units into buckets until we
  run out (same thing?); redistributing by /sorprendido/ when the
  delta is too high?

  #+BEGIN_SRC scheme :tangle triplet.scm
    (use srfi-1)
    
    (define (triplet total)
      (let ((factor (inexact->exact (floor (/ total 3)))))
        (list factor factor (- total (* 2 factor)))))
    
    (define (best triplet)
      (apply max triplet))
    
    (define (worst triplet)
      (apply min triplet))
    
    (define (surprising->unsurprising triplet)
      (let ((best (best triplet))
            (worst (worst triplet)))
        (list worst (+ worst 1) (- best 1))))
    
    (define (delta triplet)
      (- (best triplet) (worst triplet)))
    
    (define (surprising? triplet)
      (= (delta triplet) 2))
    
    (define (impossible? triplet)
      (> (delta triplet) 2))
    
    #;
    (any
     identity
     (map (lambda (total)
            (let ((triplet (triplet total)))
              (debug triplet
                     (best triplet)
                     (worst triplet)
                     (delta triplet)
                     (surprising? triplet)
                     (impossible? triplet))
              (impossible? triplet)))
          (iota 20)))
  #+END_SRC

  It looks like, starting from a surplus of surprising results; we're
  going to have to render some unsurprising. But we can't just render
  any results unsurprising: such that we don't fuck up $p$, we want to
  unsurprise the minimum surprising result.

  #+BEGIN_SRC scheme
    (use test srfi-95)
    
    (include "triplet.scm")
    
    ;;; Make sure there's no impossible triplets in the first 31 possible
    ;;; scores (0 <= t_i <= 30).
    (test-assert
     (not (any identity (map (compose impossible? triplet)
                             (iota 31)))))
    
    (define mod-three-triplet
      (lambda (total)
        (let ((term (inexact->exact (/ total 3))))
          (list (- term 1) term (+ term 1)))))
    
    (define surprising-triplet
       (lambda (total)
         (let ((term (inexact->exact (floor (/ total 3)))))
           (list term term (+ term 2)))))
    
    (define unsurprising-triplet
       (lambda (total)
         (let ((term (inexact->exact (ceiling (/ total 3)))))
           (list term term (+ term 1)))))
    
    (test
     '(6 7 8)
     (mod-three-triplet 21))
    
    (test
     '(2 2 4)
     (surprising-triplet 8))
    
    (test
     '(3 3 4)
     (unsurprising-triplet 8))
    
    (define totals->surprises
      '(((15 13 11) . 1)
        ((23 22 21) . 0)
        ((1 8 0) . 1)
        ((29 20 8 18 18 21) . 2)))
    
    ;; (count values (map surprising? (map triplet '(15 13 11))))
    
    #;
    (map (lambda (totals->surprises)
           (debug (car totals->surprises)
                  (map triplet (car totals->surprises))
                  (map (lambda (triplet)
                         (if (surprising? triplet)
                             (surprising->unsurprising triplet)
                             triplet))
                       (map triplet (car totals->surprises)))
                  (count values
                         (map surprising?
                              (map (lambda (triplet)
                                     (if (surprising? triplet)
                                         (surprising->unsurprising triplet)
                                         triplet))
                                   (map triplet (car totals->surprises))))))
           (count values
                  (map surprising?
                       (map triplet (car totals->surprises)))))
         totals->surprises)
    
    (let* ((totals '(29 20 8 18 18 21))
           (triplets (map triplet totals))
           (bests (map best triplets)))
      (let ((bests->triplets (sort (zip bests triplets) < car))
            (target-surprises 1)
            (surprises (count values (map surprising? triplets))))
        (debug (zip totals triplets) bests->triplets surprises)))
  #+END_SRC

  Maintain a mapping of best -> triplets in order of increasing best;
  unsurprise away the worst suprising triplets.

  Let's construct the triplets from the highest total; maximizing the
  best surprises.

  I wonder if it's the case that every integer can be encoded as $(x,
  x-2, x-2)$; if not, we can have $(x, x-1, x-2)$. Multiples of three
  cannot be coded as $(x, x-2, x-2)$; everything else can. Let's
  maximize the surprises; keep the $(x, x-1, x-2)s$.

  We need: 3-mod triplet; surprising triplet; unsurprising triplet.
  For surprising triplets, we take the floor and aim low; for
  unsurprising triplets, we take the ceiling and aim high.
